//! This module defines the built-in patterns that `mc` uses by default.
//!
//! These patterns cover common files and directories generated by various build tools
//! and development environments, such as `node_modules`, `target`, `dist`, etc.
//! The patterns are lazily initialized for efficiency using `once_cell`.

use once_cell::sync::Lazy;
use crate::types::PatternCategory;

/// A lazily initialized static set of built-in patterns.
///
/// This includes lists of directories, files, and exclusion patterns that are
/// commonly found in software projects. These defaults can be extended or overridden
/// through user configuration.
pub static BUILTIN_PATTERNS: Lazy<PatternSet> = Lazy::new(|| {
    PatternSet {
        categorized_dirs: vec![
            // Build outputs
            ("dist", PatternCategory::BuildOutputs),
            ("build", PatternCategory::BuildOutputs),
            (".next", PatternCategory::BuildOutputs),
            ("out", PatternCategory::BuildOutputs),
            ("target", PatternCategory::BuildOutputs),

            // Dependencies
            ("node_modules", PatternCategory::Dependencies),
            (".venv", PatternCategory::Dependencies),
            ("vendor", PatternCategory::Dependencies),

            // Cache
            (".turbo", PatternCategory::Cache),
            (".bun", PatternCategory::Cache),
            (".pytest_cache", PatternCategory::Cache),
            (".benchmark-cache", PatternCategory::Cache),
            ("coverage", PatternCategory::Cache),
            (".ropeproject", PatternCategory::Cache),
            (".ruby-lsp", PatternCategory::Cache),

            // IDE and Tools
            (".idea", PatternCategory::IDE),
            (".flock", PatternCategory::IDE),
            (".swarm", PatternCategory::IDE),
            (".hive-mind", PatternCategory::IDE),
            (".claude-flow", PatternCategory::IDE),
            (".roo", PatternCategory::IDE),
            ("memory", PatternCategory::Other),
            ("coordination", PatternCategory::Other),
            ("claude-flow", PatternCategory::IDE),
            (".mcp.json", PatternCategory::IDE),
        ],
        categorized_files: vec![
            ("*.tsbuildinfo", PatternCategory::BuildOutputs),
            ("package-lock.json", PatternCategory::Cache),
            ("bun.lock", PatternCategory::Cache),
            ("uv.lock", PatternCategory::Cache),
            ("Gemfile.lock", PatternCategory::Cache),
            ("claude-flow.bat", PatternCategory::IDE),
            ("claude-flow.ps1", PatternCategory::IDE),
            ("claude-flow.config.json", PatternCategory::IDE),
            ("claude-flow-1.0.70.tgz", PatternCategory::Cache),
        ],
        exclude: vec![".git", ".github"],
    }
});

/// A structure to hold the different types of built-in patterns.
///
/// These patterns are defined as string slices for maximum efficiency, as they
/// are known at compile time.
pub struct PatternSet {
    /// A list of directory names with their categories.
    pub categorized_dirs: Vec<(&'static str, PatternCategory)>,
    /// A list of file patterns with their categories.
    pub categorized_files: Vec<(&'static str, PatternCategory)>,
    /// A list of patterns to exclude from cleaning, to prevent accidental deletion.
    pub exclude: Vec<&'static str>,
}

impl PatternSet {
    /// Returns all directories as a simple vector (for backward compatibility).
    pub fn directories(&self) -> Vec<&'static str> {
        self.categorized_dirs.iter().map(|(name, _)| *name).collect()
    }

    /// Returns all files as a simple vector (for backward compatibility).
    pub fn files(&self) -> Vec<&'static str> {
        self.categorized_files.iter().map(|(name, _)| *name).collect()
    }

    /// Gets the category for a given pattern.
    pub fn get_category(&self, pattern: &str) -> PatternCategory {
        // Check directories
        for (name, category) in &self.categorized_dirs {
            if *name == pattern {
                return *category;
            }
        }

        // Check files
        for (name, category) in &self.categorized_files {
            if *name == pattern {
                return *category;
            }
        }

        PatternCategory::Other
    }
}
